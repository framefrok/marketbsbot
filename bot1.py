import logging
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Union
import asyncio

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from tinydb import TinyDB, Query
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = TinyDB('database.json')
market_table = db.table('market_data')
alerts_table = db.table('alerts')
settings_table = db.table('settings')

# –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}  # user_id -> state_name
user_data = {}    # user_id -> dict —Å –¥–∞–Ω–Ω—ã–º–∏ (resource, direction –∏ —Ç.–¥.)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHOOSING_RESOURCE = "choosing_resource"
STATE_CHOOSING_DIRECTION = "choosing_direction"
STATE_ENTERING_TARGET_PRICE = "entering_target_price"
STATE_SETTINGS_ANCHOR = "settings_anchor"
STATE_SETTINGS_TRADE_LEVEL = "settings_trade_level"

# –≠–º–æ–¥–∑–∏ ‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
EMOJI_TO_RESOURCE = {
    "ü™µ": "–î–µ—Ä–µ–≤–æ",
    "ü™®": "–ö–∞–º–µ–Ω—å",
    "üçû": "–ü—Ä–æ–≤–∏–∑–∏—è",
    "üê¥": "–õ–æ—à–∞–¥–∏"
}

RESOURCE_EMOJI = {v: k for k, v in EMOJI_TO_RESOURCE.items()}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id: int) -> Dict[str, Union[bool, int]]:
    Settings = Query()
    setting = settings_table.get(Settings.user_id == user_id)
    if setting:
        return {
            "has_anchor": setting.get("has_anchor", False),
            "trade_level": setting.get("trade_level", 0),
            "push_interval": setting.get("push_interval", 30),
            "push_enabled": setting.get("push_enabled", True)
        }
    return {
        "has_anchor": False,
        "trade_level": 0,
        "push_interval": 30,
        "push_enabled": True
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_settings(user_id: int, has_anchor: bool, trade_level: int, push_interval: int = 30, push_enabled: bool = True):
    settings_table.upsert({
        "user_id": user_id,
        "has_anchor": has_anchor,
        "trade_level": trade_level,
        "push_interval": push_interval,
        "push_enabled": push_enabled
    }, Query().user_id == user_id)

# –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–≥–æ–¥—ã)
def get_user_bonus(user_id: int) -> float:
    settings = get_user_settings(user_id)
    bonus = 0.02 if settings["has_anchor"] else 0.0
    bonus += 0.02 * settings["trade_level"]
    return bonus

# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã -> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ)
def adjust_prices_for_user(user_id: int, buy: float, sell: float) -> Tuple[float, float]:
    bonus = get_user_bonus(user_id)
    adjusted_buy = buy / (1 + bonus)
    adjusted_sell = sell * (1 + bonus)
    return adjusted_buy, adjusted_sell

# –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
def parse_market_message(text: str) -> Optional[Dict[str, Dict[str, Union[float, int]]]]:
    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    resources = {}
    current_resource = None
    current_quantity = 0

    resource_pattern = r"^(.+?):\s*([0-9,]*)\s*([ü™µü™®üçûüê¥])$"
    price_pattern = r"(?:[üìàüìâ]?\s*)?–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å:\s*([0-9.]+)\s*/\s*([0-9.]+)\s*üí∞"

    for i, line in enumerate(lines):
        if line == "üé™ –†—ã–Ω–æ–∫":
            continue

        res_match = re.match(resource_pattern, line)
        if res_match:
            name_part = res_match.group(1).strip()
            qty_str = res_match.group(2).replace(',', '').strip()
            emoji = res_match.group(3)

            current_resource = EMOJI_TO_RESOURCE.get(emoji, name_part)
            current_quantity = int(qty_str) if qty_str.isdigit() else 0
            continue

        price_match = re.search(price_pattern, line)
        if price_match and current_resource:
            try:
                buy_price = float(price_match.group(1))
                sell_price = float(price_match.group(2))
                resources[current_resource] = {
                    "buy": buy_price,
                    "sell": sell_price,
                    "quantity": current_quantity
                }
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {current_resource} ‚Äî –ø–æ–∫—É–ø–∫–∞ {buy_price}, –ø—Ä–æ–¥–∞–∂–∞ {sell_price}, –∫–æ–ª-–≤–æ {current_quantity}")
                current_resource = None
                current_quantity = 0
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω: {e}")
                continue

    if not resources:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.")
        return None

    return resources

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
def get_recent_data(resource: str, minutes: int = 15) -> List[Dict]:
    MarketData = Query()
    cutoff_time = int((datetime.now() - timedelta(minutes=minutes)).timestamp())
    records = market_table.search(
        (MarketData.resource == resource) & (MarketData.timestamp >= cutoff_time)
    )
    records.sort(key=lambda x: x['timestamp'])
    return records

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
def get_latest_data(resource: str) -> Optional[Dict]:
    MarketData = Query()
    records = market_table.search(MarketData.resource == resource)
    if not records:
        return None
    records.sort(key=lambda x: x['timestamp'], reverse=True)
    return records[0]

# –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
def calculate_speed(records: List[Dict], price_type: str = "buy") -> Optional[float]:
    if len(records) < 2:
        return None

    first = records[0]
    last = records[-1]

    price_delta = last[price_type] - first[price_type]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0

    if time_delta_minutes < 0.1:
        return None

    speed = price_delta / time_delta_minutes
    return round(speed, 4)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
def get_trend(records: List[Dict], price_type: str = "buy") -> str:
    if len(records) < 2:
        return "stable"

    first_price = records[0][price_type]
    last_price = records[-1][price_type]

    if last_price > first_price:
        return "up"
    elif last_price < first_price:
        return "down"
    else:
        return "stable"

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_to_user_and_group(context: CallbackContext, user_id: int, chat_id: Optional[int], text: str, 
                                reply_to_message_id: Optional[int] = None, reply_markup: Optional[InlineKeyboardMarkup] = None):
    try:
        if reply_to_message_id:
            await context.bot.send_message(chat_id=user_id, text=text, reply_to_message_id=reply_to_message_id, reply_markup=reply_markup)
        else:
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

        if chat_id and chat_id != user_id:
            try:
                if reply_to_message_id:
                    await context.bot.send_message(chat_id=chat_id, text=text, reply_to_message_id=reply_to_message_id, reply_markup=reply_markup)
                else:
                    await context.bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}: {e}")
                await context.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
async def send_resource_selection(context: CallbackContext, user_id: int, chat_id: Optional[int] = None):
    buttons = [
        [InlineKeyboardButton(text=res, callback_data=f"resource_{res}")]
        for res in EMOJI_TO_RESOURCE.values()
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    try:
        user = await context.bot.get_chat(user_id)
        username = user.username or 'User'
    except:
        username = 'User'
    message_text = f"üìä @{username}, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"

    await send_to_user_and_group(context, user_id, chat_id, message_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Å —Ä—ã–Ω–∫–æ–º
async def handle_market_forward(update: Update, context: CallbackContext):
    try:
        message = update.message
        if not message.forward_from or not message.forward_from.is_bot:
            await message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –æ—Ç –±–æ—Ç–∞ —Ä—ã–Ω–∫–∞.")
            return

        logger.info(f"Forwarded from: {message.forward_from.username} (ID: {message.forward_from.id})")

        current_time = datetime.now().timestamp()
        if current_time - message.date.timestamp() > 3600:
            await message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–±–æ–ª–µ–µ —á–∞—Å–∞). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞...")
        data = parse_market_message(message.text)
        if not data:
            await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        timestamp = int(message.date.timestamp())
        saved_count = 0
        user_id = message.from_user.id
        chat_id = message.chat.id if message.chat.type in ['group', 'supergroup'] else None

        for resource, prices in data.items():
            MarketData = Query()
            existing = market_table.get(
                (MarketData.resource == resource) &
                (MarketData.timestamp == timestamp) &
                (MarketData.buy == prices["buy"]) &
                (MarketData.sell == prices["sell"])
            )

            if not existing:
                try:
                    market_table.insert({
                        "resource": resource,
                        "buy": prices["buy"],
                        "sell": prices["sell"],
                        "quantity": prices.get("quantity", 0),
                        "timestamp": timestamp,
                        "date": datetime.fromtimestamp(timestamp).isoformat()
                    })
                    saved_count += 1
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {resource} - buy={prices['buy']}, sell={prices['sell']}, qty={prices['quantity']}")
                except Exception as db_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resource}: {db_e}")
                    await send_to_user_and_group(context, user_id, chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resource}.", message.message_id)
                    continue

        if saved_count > 0:
            await send_to_user_and_group(context, user_id, chat_id, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–∫–∞.", message.message_id)

            for resource in EMOJI_TO_RESOURCE.values():
                if len(get_recent_data(resource, 15)) >= 2:
                    await send_resource_selection(context, user_id, chat_id)
                    break

            context.application.create_task(update_dynamic_timers_once(context))

        else:
            await send_to_user_and_group(context, user_id, chat_id, "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞–Ω–µ–µ.", message.message_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}", exc_info=True)
        await send_to_user_and_group(context, update.effective_user.id, None, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.", update.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
async def process_resource_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    resource = query.data.split('_', 1)[1]

    records = get_recent_data(resource, 15)
    if len(records) < 2:
        chat_id = query.message.chat.id if query.message.chat.type in ['group', 'supergroup'] else None
        await send_to_user_and_group(context, query.from_user.id, chat_id, 
                                   f"‚ö†Ô∏è –î–ª—è {resource} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.", query.message.message_id)
        return

    user_id = query.from_user.id
    chat_id = query.message.chat.id if query.message.chat.type in ['group', 'supergroup'] else None
    user_states[user_id] = STATE_CHOOSING_DIRECTION
    user_data[user_id] = {"resource": resource, "chat_id": chat_id}

    speed = calculate_speed(records, "buy")
    trend = get_trend(records, "buy")
    current_price = records[-1]["buy"]

    # –í–ê–ñ–ù–û: –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–Ω—É—Å –∏–≥—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
    bonus = get_user_bonus(user_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
    adjusted_buy = current_price
    adj_speed = speed  # –°–∫–æ—Ä–æ—Å—Ç—å —Ç–∞–∫–∂–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º

    trend_emoji = "üìà" if trend == "up" else "üìâ" if trend == "down" else "‚û°Ô∏è"
    trend_text = "—Ä–∞—Å—Ç—ë—Ç" if trend == "up" else "–ø–∞–¥–∞–µ—Ç" if trend == "down" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞"

    buttons = [
        [InlineKeyboardButton(text="üìâ –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data="direction_down")],
        [InlineKeyboardButton(text="üìà –†–æ—Å—Ç —Ü–µ–Ω—ã", callback_data="direction_up")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    speed_text = f"{adj_speed:+.4f}" if adj_speed is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    message_text = (
        f"üìä @{query.from_user.username or 'User'}, –≤—ã –≤—ã–±—Ä–∞–ª–∏ {resource}. "
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {adjusted_buy:.2f}\n"
        f"–¢—Ä–µ–Ω–¥: {trend_text} ({speed_text} –≤ –º–∏–Ω—É—Ç—É)\n\n"
        f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )

    await send_to_user_and_group(context, user_id, chat_id, message_text, query.message.message_id, keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
async def cancel_action(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    chat_id = query.message.chat.id if query.message.chat.type in ['group', 'supergroup'] else None
    await send_to_user_and_group(context, user_id, chat_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", query.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
async def process_direction_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if user_states.get(user_id) != STATE_CHOOSING_DIRECTION:
        return

    direction = "down" if query.data == "direction_down" else "up"
    resource = user_data[user_id]["resource"]
    chat_id = user_data[user_id].get("chat_id")

    records = get_recent_data(resource, 15)
    current_price = records[-1]["buy"]
    trend = get_trend(records, "buy")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –±–æ–Ω—É—Å–æ–º)
    adjusted_buy = current_price

    if (direction == "down" and trend != "down") or (direction == "up" and trend != "up"):
        trend_text = "–ø–∞–¥–∞–µ—Ç" if trend == "down" else "—Ä–∞—Å—Ç—ë—Ç" if trend == "up" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞"
        message_text = (
            f"‚ö†Ô∏è @{query.from_user.username or 'User'}, –≤–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ {resource} —Å–µ–π—á–∞—Å {trend_text}, "
            f"–∞ –≤—ã –≤—ã–±—Ä–∞–ª–∏ {'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'}. "
            f"–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
        await send_to_user_and_group(context, user_id, chat_id, message_text, query.message.message_id)

    user_data[user_id]["direction"] = direction
    user_states[user_id] = STATE_ENTERING_TARGET_PRICE

    message_text = f"üí∞ @{query.from_user.username or 'User'}, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è {resource} (–Ω–∞–ø—Ä–∏–º–µ—Ä: {adjusted_buy * 0.9:.2f}):"
    await send_to_user_and_group(context, user_id, chat_id, message_text, query.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
async def process_target_price(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    
    if user_states.get(user_id) != STATE_ENTERING_TARGET_PRICE:
        return

    chat_id = user_data.get(user_id, {}).get("chat_id")
    try:
        target_price = float(message.text.strip().replace(',', '.'))
        if target_price <= 0:
            await send_to_user_and_group(context, user_id, chat_id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", message.message_id)
            return
    except ValueError:
        await send_to_user_and_group(context, user_id, chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.55).", message.message_id)
        return

    resource = user_data[user_id]["resource"]
    direction = user_data[user_id]["direction"]

    records = get_recent_data(resource, 15)
    if len(records) < 2:
        await send_to_user_and_group(context, user_id, chat_id, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.", message.message_id)
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    speed = calculate_speed(records, "buy")
    if speed is None:
        await send_to_user_and_group(context, user_id, chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.", message.message_id)
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –±–æ–Ω—É—Å–æ–º)
    adj_speed = speed
    current_price = records[-1]["buy"]
    adjusted_buy = current_price
    price_diff = target_price - adjusted_buy

    if (direction == "down" and target_price >= adjusted_buy) or \
       (direction == "up" and target_price <= adjusted_buy):
        message_text = f"‚ö†Ô∏è @{message.from_user.username or 'User'}, –ø—Ä–∏ {('–ø–∞–¥–µ–Ω–∏–∏' if direction == 'down' else '—Ä–æ—Å—Ç–µ')} —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {('–Ω–∏–∂–µ' if direction == 'down' else '–≤—ã—à–µ')} —Ç–µ–∫—É—â–µ–π ({adjusted_buy:.2f})."
        await send_to_user_and_group(context, user_id, chat_id, message_text, message.message_id)
        return

    trend = get_trend(records, "buy")
    if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
        message_text = (
            f"‚ö†Ô∏è @{message.from_user.username or 'User'}, –≤–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–¥—É. "
            f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å."
        )
        await send_to_user_and_group(context, user_id, chat_id, message_text, message.message_id)

    if (direction == "down" and adj_speed >= 0) or (direction == "up" and adj_speed <= 0):
        message_text = f"‚ö†Ô∏è @{message.from_user.username or 'User'}, —Ü–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–π —Ü–µ–ª–∏. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        await send_to_user_and_group(context, user_id, chat_id, message_text, message.message_id)
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    time_minutes = abs(price_diff) / abs(adj_speed)
    alert_time = datetime.now() + timedelta(minutes=time_minutes)
    alert_id = alerts_table.insert({
        "user_id": user_id,
        "resource": resource,
        "target_price": target_price,
        "direction": direction,
        "speed": adj_speed,
        "current_price": adjusted_buy,
        "alert_time": alert_time.isoformat(),
        "created_at": datetime.now().isoformat(),
        "status": "active",
        "chat_id": chat_id,
        "message_id": None,
        "last_checked": datetime.now().isoformat()
    })

    alert_time_str = alert_time.strftime("%H:%M:%S")
    username = message.from_user.username or 'User'
    notification_text = (
        f"‚úÖ @{username} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–∞–π–º–µ—Ä!\n"
        f"–†–µ—Å—É—Ä—Å: {resource}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {adjusted_buy:.2f}\n"
        f"–¶–µ–ª—å: {target_price:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'})\n"
        f"–°–∫–æ—Ä–æ—Å—Ç—å: {adj_speed:+.4f} –≤ –º–∏–Ω—É—Ç—É\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(time_minutes)} –º–∏–Ω.\n"
        f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {alert_time_str}"
    )

    sent_message = await message.reply_text(notification_text)

    message_id = None
    if chat_id and chat_id != user_id:
        try:
            chat = await context.bot.get_chat(chat_id)
            pinned_message = chat.pinned_message
            if not pinned_message:
                await context.bot.pin_chat_message(chat_id, sent_message.message_id, disable_notification=True)
                message_id = sent_message.message_id
            alerts_table.update({'message_id': message_id}, doc_ids=[alert_id])
            await context.bot.send_message(chat_id, notification_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ {chat_id}: {e}")
            await context.bot.send_message(user_id, f"‚ö†Ô∏è @{username}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ {chat_id}.")

    context.application.create_task(schedule_alert(context, alert_id, user_id, resource, target_price, alert_time, chat_id, message_id))

    user_states.pop(user_id, None)
    user_data.pop(user_id, None)

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def schedule_alert(context: CallbackContext, alert_id: int, user_id: int, resource: str, target_price: float, 
                        alert_time: datetime, chat_id: Optional[int] = None, message_id: Optional[int] = None):
    now = datetime.now()
    sleep_seconds = max(0, (alert_time - now).total_seconds())

    await asyncio.sleep(sleep_seconds)

    Alert = Query()
    alert = alerts_table.get(doc_id=alert_id)
    if not alert or alert.get('status') != 'active':
        return

    try:
        latest_data = get_latest_data(resource)
        if not latest_data:
            raise ValueError(f"–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞: {resource}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –±–æ–Ω—É—Å–æ–º)
        current_price = latest_data['buy']
        direction = alert['direction']

        is_target_reached = False
        if direction == "down" and current_price <= target_price:
            is_target_reached = True
        elif direction == "up" and current_price >= target_price:
            is_target_reached = True

        username = (await context.bot.get_chat(user_id)).username or 'User'
        notification_text = (
            f"üîî @{username} {resource} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã!\n"
            f"–¶–µ–ª—å: {target_price:.2f}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n\n"
            f"–í—Ä–µ–º—è {'–ø–æ–∫—É–ø–∞—Ç—å!' if direction == 'down' else '–ø—Ä–æ–¥–∞–≤–∞—Ç—å!'}"
        ) if is_target_reached else (
            f"‚è∞ @{username} –¢–∞–π–º–µ—Ä –¥–ª—è {resource} —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Ü–µ–ª—å ({target_price:.2f}) "
            f"–µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}).\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä—ã–Ω–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
        )

        await context.bot.send_message(user_id, notification_text)

        if chat_id and chat_id != user_id:
            try:
                await context.bot.send_message(chat_id, notification_text)
                if message_id:
                    await context.bot.unpin_chat_message(chat_id, message_id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ {chat_id}: {e}")
                await context.bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        alerts_table.update({'status': 'completed' if is_target_reached else 'expired'}, doc_ids=[alert_id])

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        alerts_table.update({'status': 'error'}, doc_ids=[alert_id])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ –≤ –∏–≥—Ä–µ BastionSiege.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º (—Å —ç–º–æ–¥–∑–∏ üé™), –∏ —è –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑.\n"
        "–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω\n"
        "/stat - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–Ω—É—Å—ã (–Ø–∫–æ—Ä—å –∏ —Ç–æ—Ä–≥–æ–≤–ª—è)\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

# –ö–æ–º–∞–Ω–¥–∞ /status
async def cmd_status(update: Update, context: CallbackContext):
    Alert = Query()
    alerts = alerts_table.search((Alert.user_id == update.effective_user.id) & (Alert.status == 'active'))

    if not alerts:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
        return

    text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n\n"
    now = datetime.now()
    for alert in alerts:
        direction = "–ø–∞–¥–µ–Ω–∏–µ" if alert["direction"] == "down" else "—Ä–æ—Å—Ç"
        alert_time = datetime.fromisoformat(alert["alert_time"])
        remaining = alert_time - now
        mins = int(remaining.total_seconds() // 60)
        secs = int(remaining.total_seconds() % 60)

        if mins < 0:
            text += (
                f"‚Ä¢ {alert['resource']} ‚Üí {alert['target_price']:.2f} ({direction})\n"
                f"  –î–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å: {alert_time.strftime('%H:%M:%S')}\n\n"
            )
        else:
            text += (
                f"‚Ä¢ {alert['resource']} ‚Üí {alert['target_price']:.2f} ({direction})\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å: {mins} –º–∏–Ω. {secs} —Å–µ–∫.\n"
                f"  –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤: {alert_time.strftime('%H:%M:%S')}\n\n"
            )

    await update.message.reply_text(text)

# –ö–æ–º–∞–Ω–¥–∞ /history
async def cmd_history(update: Update, context: CallbackContext):
    try:
        args = context.args
        resource = args[0].capitalize() if len(args) > 0 else None
        hours = int(args[1]) if len(args) > 1 else 24

        if not resource or resource not in EMOJI_TO_RESOURCE.values():
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/history –î–µ—Ä–µ–≤–æ\n"
                "/history –ö–∞–º–µ–Ω—å 12  (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)"
            )
            return

        user_id = update.effective_user.id
        MarketData = Query()
        cutoff_time = int((datetime.now() - timedelta(hours=hours)).timestamp())
        records = market_table.search(
            (MarketData.resource == resource) & (MarketData.timestamp >= cutoff_time)
        )

        if not records:
            await update.message.reply_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤.")
            return

        records.sort(key=lambda x: x['timestamp'])

        text = f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n"

        current_hour = None
        for record in records[-10:]:
            record_time = datetime.fromtimestamp(record['timestamp'])
            hour_str = record_time.strftime("%H:00")

            if hour_str != current_hour:
                text += f"\nüïê {hour_str}:\n"
                current_hour = hour_str

            time_str = record_time.strftime("%H:%M")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –±–æ–Ω—É—Å–æ–º)
            adj_buy = record['buy']
            adj_sell = record['sell']
            text += f"  {time_str} - –ö—É–ø–∏—Ç—å: {adj_buy:.2f}, –ü—Ä–æ–¥–∞—Ç—å: {adj_sell:.2f}\n"

        recent_records = get_recent_data(resource, minutes=60)
        if recent_records and len(recent_records) >= 2:
            speed = calculate_speed(recent_records, "buy")
            adj_speed = speed  # –°–∫–æ—Ä–æ—Å—Ç—å –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
            trend = get_trend(recent_records, "buy")
            trend_text = "—Ä–∞—Å—Ç—ë—Ç üìà" if trend == "up" else "–ø–∞–¥–∞–µ—Ç üìâ" if trend == "down" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞ ‚û°Ô∏è"
            speed_str = f"{adj_speed:+.4f}" if adj_speed is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"\n–¢—Ä–µ–Ω–¥: {trend_text} ({speed_str}/–º–∏–Ω)"

        await update.message.reply_text(text)

    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /history <—Ä–µ—Å—É—Ä—Å> [—á–∞—Å—ã]")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /history: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /cancel
async def cmd_cancel(update: Update, context: CallbackContext):
    Alert = Query()
    alerts = alerts_table.search((Alert.user_id == update.effective_user.id) & (Alert.status == 'active'))

    if not alerts:
        await update.message.reply_text("üóëÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—è.")
        return

    for alert in alerts:
        alerts_table.update({'status': 'cancelled'}, doc_ids=[alert.doc_id])

    await update.message.reply_text(f"üóëÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ {len(alerts)} –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /settings
async def cmd_settings(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_states[user_id] = STATE_SETTINGS_ANCHOR
    user_data[user_id] = {}

    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, –µ—Å—Ç—å –Ø–∫–æ—Ä—å", callback_data="anchor_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="anchor_no")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    await update.message.reply_text("‚öìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–æ–≤: –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ø–∫–æ—Ä—å (–≤—ã–≥–æ–¥–∞ +2%)?", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∫–æ—Ä—è
async def process_anchor_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if user_states.get(user_id) != STATE_SETTINGS_ANCHOR:
        return

    has_anchor = query.data == "anchor_yes"

    user_data[user_id]["has_anchor"] = has_anchor
    user_states[user_id] = STATE_SETTINGS_TRADE_LEVEL

    await context.bot.send_message(
        user_id,
        "‚öñÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è '–û—Å–Ω–æ–≤—ã —Ç–æ—Ä–≥–æ–≤–ª–∏' (0-10, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3):"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è —Ç–æ—Ä–≥–æ–≤–ª–∏
async def process_trade_level(update: Update, context: CallbackContext):
    message = update.message
    user_id = message.from_user.id
    
    if user_states.get(user_id) != STATE_SETTINGS_TRADE_LEVEL:
        return

    try:
        trade_level = int(message.text.strip())
        if trade_level < 0 or trade_level > 10:
            await message.reply_text("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10.")
            return
    except ValueError:
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0-10).")
        return

    has_anchor = user_data[user_id]["has_anchor"]
    save_user_settings(user_id, has_anchor, trade_level)

    bonus = get_user_bonus(user_id)
    bonus_text = f"{bonus * 100:.0f}%" if bonus > 0 else "0%"

    await message.reply_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–Ø–∫–æ—Ä—å: {'‚úÖ' if has_anchor else '‚ùå'}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {trade_level}\n"
        f"–û–±—â–∞—è –≤—ã–≥–æ–¥–∞ –Ω–∞ —Ü–µ–Ω—ã: {bonus_text}"
    )

    user_states.pop(user_id, None)
    user_data.pop(user_id, None)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def cmd_help(update: Update, context: CallbackContext):
    help_text = (
        "üìñ –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "1. –ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç (–ª–∏—á–Ω—ã–π –∏–ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π) –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å —ç–º–æ–¥–∑–∏ üé™.\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã: –î–µ—Ä–µ–≤–æ, –ö–∞–º–µ–Ω—å, –ü—Ä–æ–≤–∏–∑–∏—è, –õ–æ—à–∞–¥–∏.\n"
        "‚Ä¢ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∫–æ–ø–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –∑–∞ 15 –º–∏–Ω—É—Ç), –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ (–≤ –ª–∏—á–Ω–æ–º –∏ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).\n\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ä–æ—Å—Ç üìà –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ üìâ —Ü–µ–Ω—ã.\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.\n"
        "‚Ä¢ –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–∏!\n\n"
        "3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n"
        "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –¥–æ –∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.\n"
        "‚Ä¢ /history <—Ä–µ—Å—É—Ä—Å> [—á–∞—Å—ã] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω. –ü—Ä–∏–º–µ—Ä: /history –î–µ—Ä–µ–≤–æ 6.\n"
        "‚Ä¢ /stat ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—ã–Ω–∫–∞ –∏ –º–∞–∫—Å–∏–º—É–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é.\n"
        "‚Ä¢ /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–Ω–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –Ω–∞ —Ü–µ–Ω—É. –ü—Ä–∏–º–µ—Ä: /timer –î–µ—Ä–µ–≤–æ 8.50\n"
        "‚Ä¢ /push ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞.\n"
        "  - /push interval <–º–∏–Ω—É—Ç—ã> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (5‚Äì120 –º–∏–Ω—É—Ç)\n"
        "  - /push start ‚Äî –≤–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "  - /push stop ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–Ω—É—Å—ã –æ—Ç –Ø–∫–æ—Ä—è –∏ –∑–Ω–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n"
        "‚Ä¢ /clear_group ‚Äî —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –∏–∑ –≤–∞—à–∏—Ö —Ç–∞–π–º–µ—Ä–æ–≤.\n\n"
        "4. –í–∞–∂–Ω–æ:\n"
        "‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω. –ß–µ–º —á–∞—â–µ –≤—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n"
        "‚Ä¢ –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–µ–∑–∫–æ –∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–æ–≤—Ä–µ–º—è) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ —á–∞—Å.\n"
        "‚Ä¢ –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–∞–π–º–µ—Ä–∞—Ö –∑–∞–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –∏ –æ—Ç–∫—Ä–µ–ø–ª—è—é—Ç—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏. –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥—Ä—É–ø–ø–∞—Ö, –µ—Å–ª–∏ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."
    )
    await update.message.reply_text(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /stat ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
async def cmd_stat(update: Update, context: CallbackContext):
    try:
        user_id = update.effective_user.id
        now = datetime.now()
        text = (
            f"<b>üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞</b>\n"
            f"üïó –û–±–Ω–æ–≤–ª–µ–Ω–æ: {now.strftime('%d.%m.%Y %H:%M')}\n"
            f"{'‚îÄ' * 22}\n\n"
        )

        resources = list(EMOJI_TO_RESOURCE.values())
        week_ago = int((now - timedelta(days=7)).timestamp())

        for resource in resources:
            emoji = RESOURCE_EMOJI.get(resource, "üî∏")
            latest = get_latest_data(resource)
            if not latest:
                text += f"{emoji} <b>{resource}</b> ‚Äî ‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                continue

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—ã –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –±–æ–Ω—É—Å–æ–º)
            last_buy = latest['buy']
            last_sell = latest['sell']
            last_timestamp = latest['timestamp']

            MarketData = Query()
            week_records = market_table.search(
                (MarketData.resource == resource) & (MarketData.timestamp >= week_ago)
            )

            if week_records:
                week_buy = [r['buy'] for r in week_records]
                week_sell = [r['sell'] for r in week_records]
                max_buy = max(week_buy)
                max_sell = max(week_sell)
                min_buy = min(week_buy)
                min_sell = min(week_sell)
                max_qty = max((r.get('quantity', 0) for r in week_records), default=0)
            else:
                max_buy = min_buy = last_buy
                max_sell = min_sell = last_sell
                max_qty = 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞
            recent = get_recent_data(resource, minutes=60)
            current_buy = last_buy
            current_sell = last_sell
            trend_desc = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            trend_icon = "‚è∏Ô∏è"

            if len(recent) >= 2:
                speed_buy = calculate_speed(recent, "buy")
                speed_sell = calculate_speed(recent, "sell")
                trend_buy = get_trend(recent, "buy")

                # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                elapsed_minutes = (now.timestamp() - last_timestamp) / 60.0
                if speed_buy is not None and elapsed_minutes > 0.1:
                    current_buy = last_buy + (speed_buy * elapsed_minutes)
                if speed_sell is not None and elapsed_minutes > 0.1:
                    current_sell = last_sell + (speed_sell * elapsed_minutes)

                # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
                if trend_buy == "up":
                    trend_icon = "üìà"
                    trend_desc = f"—Ä–∞—Å—Ç—ë—Ç ({speed_buy:+.4f}/–º–∏–Ω)"
                elif trend_buy == "down":
                    trend_icon = "üìâ"
                    trend_desc = f"–ø–∞–¥–∞–µ—Ç ({speed_buy:+.4f}/–º–∏–Ω)"
                else:
                    trend_icon = "‚ûñ"
                    trend_desc = "—Å—Ç–∞–±–∏–ª–µ–Ω"

            # –§–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            qty_str = f"{max_qty:,}".replace(",", " ") if max_qty > 0 else "–Ω–µ —É—á—Ç–µ–Ω–æ"

            text += (
                f"{emoji} <b>{resource}</b>\n"
                f"‚îú üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.fromtimestamp(last_timestamp).strftime('%H:%M')}\n"
                f"‚îú üíπ –ü–æ–∫—É–ø–∫–∞:   {current_buy:>7.3f} (–±—ã–ª–æ: {last_buy:.3f})\n"
                f"‚îÇ   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {min_buy:.3f} ‚Äî {max_buy:.3f}\n"
                f"‚îú üí∞ –ü—Ä–æ–¥–∞–∂–∞:  {current_sell:>7.3f} (–±—ã–ª–æ: {last_sell:.3f})\n"
                f"‚îÇ   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {min_sell:.3f} ‚Äî {max_sell:.3f}\n"
                f"‚îú üì¶ –ú–∞–∫—Å. –æ–±—ä—ë–º: {qty_str:>12} —à—Ç.\n"
                f"‚îî üìä –¢—Ä–µ–Ω–¥: {trend_icon} {trend_desc}\n\n"
            )

        text += f"{'‚îÄ' * 22}\n"
        text += f"üìà ‚Äî —Ä–æ—Å—Ç | üìâ ‚Äî –ø–∞–¥–µ–Ω–∏–µ | ‚ûñ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
        text += f"–¶–µ–Ω—ã —É–∂–µ –≤–∫–ª—é—á–∞—é—Ç –±–æ–Ω—É—Å—ã –∏–≥—Ä–æ–∫–∞."

        await update.message.reply_text(text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stat: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
async def update_dynamic_timers_once(context: CallbackContext):
    try:
        Alert = Query()
        active_alerts = alerts_table.search(Alert.status == 'active')

        for alert in active_alerts:
            user_id = alert['user_id']
            resource = alert['resource']
            direction = alert['direction']
            target_price = alert['target_price']
            chat_id = alert.get('chat_id')
            message_id = alert.get('message_id')
            last_checked = datetime.fromisoformat(alert['last_checked'])

            records = get_recent_data(resource, minutes=15)
            if not records or len(records) < 2:
                continue

            latest_data = get_latest_data(resource)
            if not latest_data:
                continue

            if latest_data['timestamp'] <= datetime.fromisoformat(alert['created_at']).timestamp():
                continue

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∫–∞–∫ –µ—Å—Ç—å (—É–∂–µ —Å –±–æ–Ω—É—Å–æ–º)
            current_price = latest_data['buy']
            speed = calculate_speed(records, "buy")
            if speed is None:
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            current_trend = get_trend(records, "buy")
            username = (await context.bot.get_chat(user_id)).username or 'User'
            if (direction == "down" and current_trend == "up") or \
               (direction == "up" and current_trend == "down"):
                notification_text = (
                    f"‚ö†Ô∏è @{username} –í–Ω–∏–º–∞–Ω–∏–µ! –¢—Ä–µ–Ω–¥ –¥–ª—è {resource} –∏–∑–º–µ–Ω–∏–ª—Å—è!\n"
                    f"–í—ã –∂–¥–µ—Ç–µ {'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'} –¥–æ {target_price:.2f}, "
                    f"–Ω–æ —Ü–µ–Ω–∞ —Å–µ–π—á–∞—Å {'—Ä–∞—Å—Ç–µ—Ç' if current_trend == 'up' else '–ø–∞–¥–∞–µ—Ç'}.\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n"
                    f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å."
                )

                await context.bot.send_message(user_id, notification_text)
                if chat_id and chat_id != user_id:
                    try:
                        await context.bot.send_message(chat_id, notification_text)
                        if message_id:
                            await context.bot.unpin_chat_message(chat_id, message_id)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ {chat_id}: {e}")
                        await context.bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

                alerts_table.update({'status': 'trend_changed'}, doc_ids=[alert.doc_id])
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
            if (direction == "down" and current_price <= target_price) or \
               (direction == "up" and current_price >= target_price):
                notification_text = (
                    f"üîî @{username} {resource} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã!\n"
                    f"–¶–µ–ª—å: {target_price:.2f}\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n\n"
                    f"–í—Ä–µ–º—è {'–ø–æ–∫—É–ø–∞—Ç—å!' if direction == 'down' else '–ø—Ä–æ–¥–∞–≤–∞—Ç—å!'}"
                )
                await context.bot.send_message(user_id, notification_text)
                if chat_id and chat_id != user_id:
                    try:
                        await context.bot.send_message(chat_id, notification_text)
                        if message_id:
                            await context.bot.unpin_chat_message(chat_id, message_id)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ {chat_id}: {e}")
                        await context.bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                alerts_table.update({'status': 'completed'}, doc_ids=[alert.doc_id])
                continue

            # –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
            price_diff = target_price - current_price
            if (direction == "down" and speed >= 0) or (direction == "up" and speed <= 0):
                continue

            time_minutes = abs(price_diff) / abs(speed)
            new_alert_time = datetime.now() + timedelta(minutes=time_minutes)

            alerts_table.update({
                'alert_time': new_alert_time.isoformat(),
                'speed': speed,
                'current_price': current_price,
                'last_checked': datetime.now().isoformat()
            }, doc_ids=[alert.doc_id])

            old_alert_time = datetime.fromisoformat(alert['alert_time'])
            time_diff_minutes = abs((new_alert_time - old_alert_time).total_seconds() / 60.0)
            if time_diff_minutes > 5:
                notification_text = (
                    f"üîÑ @{username} –¢–∞–π–º–µ—Ä –¥–ª—è {resource} –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                    f"–¶–µ–ª—å: {target_price:.2f}\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n"
                    f"–ù–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed:+.4f} –≤ –º–∏–Ω—É—Ç—É\n"
                    f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_alert_time.strftime('%H:%M:%S')} (~{int(time_minutes)} –º–∏–Ω.)"
                )
                await context.bot.send_message(user_id, notification_text)
                if chat_id and chat_id != user_id:
                    try:
                        await context.bot.send_message(chat_id, notification_text)
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}: {e}")
                        await context.bot.send_message(user_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–æ–≤: {e}")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
async def cleanup_expired_alerts(context: CallbackContext):
    while True:
        try:
            Alert = Query()
            now = datetime.now()
            cutoff_time = (now - timedelta(hours=1)).isoformat()
            expired_alerts = alerts_table.search(
                (Alert.status == 'active') &
                (Alert.alert_time < cutoff_time)
            )

            if expired_alerts:
                expired_ids = [alert.doc_id for alert in expired_alerts]
                alerts_table.update({'status': 'cleanup_expired'}, doc_ids=expired_ids)
                logger.info(f"–û—á–∏—Å—Ç–∫–∞: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(expired_ids)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")

        await asyncio.sleep(600)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.TEXT & filters.FORWARD & filters.Regex(r"üé™ –†—ã–Ω–æ–∫"), handle_market_forward))
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("status", cmd_status))
    application.add_handler(CommandHandler("history", cmd_history))
    application.add_handler(CommandHandler("cancel", cmd_cancel))
    application.add_handler(CommandHandler("settings", cmd_settings))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("stat", cmd_stat))
    
    application.add_handler(CallbackQueryHandler(process_resource_selection, pattern=r"^resource_"))
    application.add_handler(CallbackQueryHandler(cancel_action, pattern=r"^cancel_action"))
    application.add_handler(CallbackQueryHandler(process_direction_selection, pattern=r"^direction_"))
    application.add_handler(CallbackQueryHandler(process_anchor_selection, pattern=r"^anchor_"))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_target_price))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_trade_level))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == '__main__':
    main()