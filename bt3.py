import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Union

import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from tinydb import TinyDB, Query
from dotenv import load_dotenv
import os
import threading
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = TinyDB('database.json')
market_table = db.table('market_data')
alerts_table = db.table('alerts')
settings_table = db.table('settings')

# –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_states = {}  # user_id -> state_name
user_data = {}    # user_id -> dict —Å –¥–∞–Ω–Ω—ã–º–∏ (resource, direction –∏ —Ç.–¥.)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHOOSING_RESOURCE = "choosing_resource"
STATE_CHOOSING_DIRECTION = "choosing_direction"
STATE_ENTERING_TARGET_PRICE = "entering_target_price"
STATE_SETTINGS_ANCHOR = "settings_anchor"
STATE_SETTINGS_TRADE_LEVEL = "settings_trade_level"

# –≠–º–æ–¥–∑–∏ ‚Üí –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
EMOJI_TO_RESOURCE = {
    "ü™µ": "–î–µ—Ä–µ–≤–æ",
    "ü™®": "–ö–∞–º–µ–Ω—å",
    "üçû": "–ü—Ä–æ–≤–∏–∑–∏—è",
    "üê¥": "–õ–æ—à–∞–¥–∏"
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_settings(user_id: int) -> Dict[str, Union[bool, int]]:
    Settings = Query()
    setting = settings_table.get(Settings.user_id == user_id)
    if setting:
        return {
            "has_anchor": setting.get("has_anchor", False),
            "trade_level": setting.get("trade_level", 0)
        }
    return {"has_anchor": False, "trade_level": 0}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_settings(user_id: int, has_anchor: bool, trade_level: int):
    settings_table.upsert({
        "user_id": user_id,
        "has_anchor": has_anchor,
        "trade_level": trade_level
    }, Query().user_id == user_id)

# –†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–≥–æ–¥—ã)
def get_user_bonus(user_id: int) -> float:
    settings = get_user_settings(user_id)
    bonus = 0.02 if settings["has_anchor"] else 0.0
    bonus += 0.02 * settings["trade_level"]
    return bonus

# –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã -> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ)
def adjust_prices_for_user(user_id: int, buy: float, sell: float) -> Tuple[float, float]:
    bonus = get_user_bonus(user_id)
    adjusted_buy = buy / (1 + bonus)  # –ü–æ–∫—É–ø–∫–∞ –¥–µ—à–µ–≤–ª–µ
    adjusted_sell = sell * (1 + bonus)  # –ü—Ä–æ–¥–∞–∂–∞ –¥–æ—Ä–æ–∂–µ
    return adjusted_buy, adjusted_sell

# –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ ‚Äî –û–ë–ù–û–í–õ–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
def parse_market_message(text: str) -> Optional[Dict[str, Dict[str, Union[float, int]]]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞. –ü—Ä–∏–º–µ—Ä:
        –î–µ—Ä–µ–≤–æ: 96,342,449ü™µ
        üìâ–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å: 8.31/6.80üí∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å buy, sell –∏ quantity.
    """
    lines = [line.strip() for line in text.strip().split('\n') if line.strip()]
    resources = {}
    current_resource = None
    current_quantity = 0

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ —Ä–µ—Å—É—Ä—Å–∞: "–ù–∞–∑–≤–∞–Ω–∏–µ: —á–∏—Å–ª–æ –≠–º–æ–¥–∑–∏"
    resource_pattern = r"^(.+?):\s*([0-9,]*)\s*([ü™µü™®üçûüê¥])$"
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ü–µ–Ω: "üìà–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å: 8.31/6.80üí∞"
    price_pattern = r"(?:[üìàüìâ]?\s*)?–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å:\s*([0-9.]+)\s*/\s*([0-9.]+)\s*üí∞"

    for i, line in enumerate(lines):
        if line == "üé™ –†—ã–Ω–æ–∫":
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ä–µ—Å—É—Ä—Å–∞
        res_match = re.match(resource_pattern, line)
        if res_match:
            name_part = res_match.group(1).strip()
            qty_str = res_match.group(2).replace(',', '').strip()
            emoji = res_match.group(3)

            current_resource = EMOJI_TO_RESOURCE.get(emoji, name_part)
            current_quantity = int(qty_str) if qty_str.isdigit() else 0
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω
        price_match = re.search(price_pattern, line)
        if price_match and current_resource:
            try:
                buy_price = float(price_match.group(1))
                sell_price = float(price_match.group(2))
                resources[current_resource] = {
                    "buy": buy_price,
                    "sell": sell_price,
                    "quantity": current_quantity
                }
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {current_resource} ‚Äî –ø–æ–∫—É–ø–∫–∞ {buy_price}, –ø—Ä–æ–¥–∞–∂–∞ {sell_price}, –∫–æ–ª-–≤–æ {current_quantity}")
                current_resource = None
                current_quantity = 0
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ü–µ–Ω: {e}")
                continue

    if not resources:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.")
        return None

    return resources


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç (–±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã)
def get_recent_data(resource: str, minutes: int = 15) -> List[Dict]:
    MarketData = Query()
    cutoff_time = int((datetime.now() - timedelta(minutes=minutes)).timestamp())
    records = market_table.search(
        (MarketData.resource == resource) & (MarketData.timestamp >= cutoff_time)
    )
    records.sort(key=lambda x: x['timestamp'])
    return records


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞ (–±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã)
def get_latest_data(resource: str) -> Optional[Dict]:
    MarketData = Query()
    records = market_table.search(MarketData.resource == resource)
    if not records:
        return None
    records.sort(key=lambda x: x['timestamp'], reverse=True)
    return records[0]


# –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–Ω–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω–∞—Ö)
def calculate_speed(records: List[Dict], price_type: str = "buy") -> Optional[float]:
    if len(records) < 2:
        return None

    first = records[0]
    last = records[-1]

    price_delta = last[price_type] - first[price_type]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0

    if time_delta_minutes == 0:
        return None

    speed = price_delta / time_delta_minutes
    return round(speed, 4)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ (–Ω–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω–∞—Ö)
def get_trend(records: List[Dict], price_type: str = "buy") -> str:
    if len(records) < 2:
        return "stable"
    
    first_price = records[0][price_type]
    last_price = records[-1][price_type]
    
    if last_price > first_price:
        return "up"
    elif last_price < first_price:
        return "down"
    else:
        return "stable"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Å —Ä—ã–Ω–∫–æ–º
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Å —Ä—ã–Ω–∫–æ–º
@bot.message_handler(func=lambda message: message.text and ("üé™ –†—ã–Ω–æ–∫" in message.text))
def handle_market_forward(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ forward –æ—Ç –±–æ—Ç–∞
        if not message.forward_from:
            bot.reply_to(message, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –æ—Ç –±–æ—Ç–∞ —Ä—ã–Ω–∫–∞.")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Forwarded from: {message.forward_from.username} (ID: {message.forward_from.id}, is_bot: {message.forward_from.is_bot})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: –Ω–µ —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
        current_time = time.time()
        if current_time - message.date > 3600:
            bot.reply_to(message, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–±–æ–ª–µ–µ —á–∞—Å–∞). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞...")
        data = parse_market_message(message.text)
        if not data:
            bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        timestamp = int(message.date)
        saved_count = 0

        for resource, prices in data.items():
            MarketData = Query()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç: —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ü–µ–Ω
            existing = market_table.get(
                (MarketData.resource == resource) &
                (MarketData.timestamp == timestamp) &
                (MarketData.buy == prices["buy"]) &
                (MarketData.sell == prices["sell"])
            )
            
            if not existing:
                try:
                    market_table.insert({
                        "resource": resource,
                        "buy": prices["buy"],
                        "sell": prices["sell"],
                        "quantity": prices.get("quantity", 0),
                        "timestamp": timestamp,
                        "date": datetime.fromtimestamp(timestamp).isoformat()
                    })
                    saved_count += 1
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {resource} - buy={prices['buy']}, sell={prices['sell']}, qty={prices['quantity']}")
                except Exception as db_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resource}: {db_e}")
                    bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resource}.")
                    continue

        if saved_count > 0:
            bot.reply_to(message, f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–∫–∞.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã —É –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ >=2 –∑–∞–ø–∏—Å–µ–π –∑–∞ 15 –º–∏–Ω—É—Ç
            for resource in EMOJI_TO_RESOURCE.values():
                if len(get_recent_data(resource, 15)) >= 2:
                    send_resource_selection(message.from_user.id)
                    break
        else:
            bot.reply_to(message, "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞–Ω–µ–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}", exc_info=True)
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
def send_resource_selection(user_id: int):
    buttons = [
        [InlineKeyboardButton(text=res, callback_data=f"resource_{res}")]
        for res in EMOJI_TO_RESOURCE.values()
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    bot.send_message(user_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('resource_'))
def process_resource_selection(call):
    bot.answer_callback_query(call.id)
    resource = call.data.split('_', 1)[1]

    records = get_recent_data(resource, 15)
    if len(records) < 2:
        bot.send_message(call.from_user.id, 
                        f"‚ö†Ô∏è –î–ª—è {resource} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
    user_states[call.from_user.id] = STATE_CHOOSING_DIRECTION
    user_data[call.from_user.id] = {"resource": resource}

    speed = calculate_speed(records, "buy")
    trend = get_trend(records, "buy")
    current_price = records[-1]["buy"]
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    bonus = get_user_bonus(user_id)
    adjusted_buy, _ = adjust_prices_for_user(user_id, current_price, records[-1]["sell"])
    adj_speed = speed / (1 + bonus) if speed is not None else None
    
    trend_emoji = "üìà" if trend == "up" else "üìâ" if trend == "down" else "‚û°Ô∏è"
    trend_text = "—Ä–∞—Å—Ç—ë—Ç" if trend == "up" else "–ø–∞–¥–∞–µ—Ç" if trend == "down" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞"
    
    buttons = [
        [InlineKeyboardButton(text="üìâ –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data="direction_down")],
        [InlineKeyboardButton(text="üìà –†–æ—Å—Ç —Ü–µ–Ω—ã", callback_data="direction_up")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    
    speed_text = f"{adj_speed:+.4f}" if adj_speed is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    bot.send_message(
        call.from_user.id, 
        f"{trend_emoji} –í—ã –≤—ã–±—Ä–∞–ª–∏ {resource}. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {adjusted_buy:.2f}\n"
        f"–¢—Ä–µ–Ω–¥: {trend_text} ({speed_text} –≤ –º–∏–Ω—É—Ç—É)\n\n"
        f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", 
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
@bot.callback_query_handler(func=lambda call: call.data == 'cancel_action')
def cancel_action(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    bot.send_message(user_id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('direction_') and user_states.get(call.from_user.id) == STATE_CHOOSING_DIRECTION)
def process_direction_selection(call):
    bot.answer_callback_query(call.id)
    direction = "down" if call.data == "direction_down" else "up"
    
    user_id = call.from_user.id
    resource = user_data[user_id]["resource"]
    
    records = get_recent_data(resource, 15)
    current_price = records[-1]["buy"]
    trend = get_trend(records, "buy")
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    adjusted_buy, _ = adjust_prices_for_user(user_id, current_price, records[-1]["sell"])
    
    if (direction == "down" and trend != "down") or (direction == "up" and trend != "up"):
        trend_text = "–ø–∞–¥–∞–µ—Ç" if trend == "down" else "—Ä–∞—Å—Ç—ë—Ç" if trend == "up" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞"
        bot.send_message(
            user_id,
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ {resource} —Å–µ–π—á–∞—Å {trend_text}, –∞ –≤—ã –≤—ã–±—Ä–∞–ª–∏ "
            f"{'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
    
    user_data[user_id]["direction"] = direction
    user_states[user_id] = STATE_ENTERING_TARGET_PRICE
    
    bot.send_message(
        user_id, 
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è {resource} (–Ω–∞–ø—Ä–∏–º–µ—Ä: {adjusted_buy * 0.9:.2f}):"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == STATE_ENTERING_TARGET_PRICE)
def process_target_price(message):
    user_id = message.from_user.id
    try:
        target_price = float(message.text.strip().replace(',', '.'))
        if target_price <= 0:
            bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.55).")
        return

    resource = user_data[user_id]["resource"]
    direction = user_data[user_id]["direction"]

    records = get_recent_data(resource, 15)
    if len(records) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.")
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    speed = calculate_speed(records, "buy")
    if speed is None:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    bonus = get_user_bonus(user_id)
    adj_speed = speed / (1 + bonus)

    current_price = records[-1]["buy"]
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    adjusted_buy, _ = adjust_prices_for_user(user_id, current_price, records[-1]["sell"])
    price_diff = target_price - adjusted_buy

    if (direction == "down" and target_price >= adjusted_buy) or \
       (direction == "up" and target_price <= adjusted_buy):
        bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–∏ {('–ø–∞–¥–µ–Ω–∏–∏' if direction == 'down' else '—Ä–æ—Å—Ç–µ')} —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {('–Ω–∏–∂–µ' if direction == 'down' else '–≤—ã—à–µ')} —Ç–µ–∫—É—â–µ–π ({adjusted_buy:.2f}).")
        return

    trend = get_trend(records, "buy")
    if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
        bot.reply_to(message,
            "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–¥—É. "
            "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

    if (direction == "down" and adj_speed >= 0) or (direction == "up" and adj_speed <= 0):
        bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–π —Ü–µ–ª–∏. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        user_states.pop(user_id, None)
        user_data.pop(user_id, None)
        return

    time_minutes = abs(price_diff) / abs(adj_speed)
    alert_time = datetime.now() + timedelta(minutes=time_minutes)
    alert_id = alerts_table.insert({
        "user_id": user_id,
        "resource": resource,
        "target_price": target_price,
        "direction": direction,
        "speed": adj_speed,
        "current_price": adjusted_buy,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é
        "alert_time": alert_time.isoformat(),
        "created_at": datetime.now().isoformat(),
        "status": "active"
    })

    alert_time_str = alert_time.strftime("%H:%M:%S")
    
    bot.reply_to(
        message,
        f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        f"–†–µ—Å—É—Ä—Å: {resource}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {adjusted_buy:.2f}\n"
        f"–¶–µ–ª—å: {target_price:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'})\n"
        f"–°–∫–æ—Ä–æ—Å—Ç—å: {adj_speed:+.4f} –≤ –º–∏–Ω—É—Ç—É\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(time_minutes)} –º–∏–Ω.\n"
        f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {alert_time_str}\n\n"
        f"–ë–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–∏."
    )

    user_states.pop(user_id, None)
    user_data.pop(user_id, None)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    threading.Thread(target=schedule_alert, args=(alert_id, user_id, resource, target_price, alert_time), daemon=True).start()


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def schedule_alert(alert_id: int, user_id: int, resource: str, target_price: float, alert_time: datetime, chat_id: Optional[int] = None):
    now = datetime.now()
    sleep_seconds = (alert_time - now).total_seconds()

    if sleep_seconds > 0:
        time.sleep(sleep_seconds)

    Alert = Query()
    alert = alerts_table.get(doc_id=alert_id)
    if not alert or alert.get('status') != 'active':
        return

    try:
        latest_data = get_latest_data(resource)
        if not latest_data:
            raise ValueError(f"–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞: {resource}")

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_price, _ = adjust_prices_for_user(user_id, latest_data['buy'], latest_data['sell'])
        direction = alert['direction']

        is_target_reached = False
        if direction == "down" and current_price <= target_price:
            is_target_reached = True
        elif direction == "up" and current_price >= target_price:
            is_target_reached = True

        notification_text = (
            f"üîî {resource} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã!\n"
            f"–¶–µ–ª—å: {target_price:.2f}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n\n"
            f"–í—Ä–µ–º—è {'–ø–æ–∫—É–ø–∞—Ç—å!' if direction == 'down' else '–ø—Ä–æ–¥–∞–≤–∞—Ç—å!'}"
        ) if is_target_reached else (
            f"‚è∞ –¢–∞–π–º–µ—Ä –¥–ª—è {resource} —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Ü–µ–ª—å ({target_price:.2f}) "
            f"–µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}).\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä—ã–Ω–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(user_id, notification_text)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id
        if chat_id and chat_id != user_id:
            try:
                bot.send_message(chat_id, f"@{bot.get_chat_member(user_id, user_id).user.username or 'User'} {notification_text}")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}: {e}")

        alerts_table.update({'status': 'completed' if is_target_reached else 'expired'}, doc_ids=[alert_id])

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        alerts_table.update({'status': 'error'}, doc_ids=[alert_id])


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
def cleanup_expired_alerts():
    while True:
        try:
            Alert = Query()
            now = datetime.now()
            cutoff_time = (now - timedelta(hours=1)).isoformat()
            expired_alerts = alerts_table.search(
                (Alert.status == 'active') &
                (Alert.alert_time < cutoff_time)
            )

            if expired_alerts:
                expired_ids = [alert.doc_id for alert in expired_alerts]
                alerts_table.update({'status': 'cleanup_expired'}, doc_ids=expired_ids)
                logger.info(f"–û—á–∏—Å—Ç–∫–∞: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(expired_ids)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")

        time.sleep(600)  # 10 –º–∏–Ω—É—Ç


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_id = message.from_user.id
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)
    bot.reply_to(
        message,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ –≤ –∏–≥—Ä–µ BastionSiege.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º (—Å —ç–º–æ–¥–∑–∏ üé™), –∏ —è –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑.\n"
        "–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω\n"
        "/stat - —Ç–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–Ω—É—Å—ã (–Ø–∫–æ—Ä—å –∏ —Ç–æ—Ä–≥–æ–≤–ª—è)\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )


# –ö–æ–º–∞–Ω–¥–∞ /status
@bot.message_handler(commands=['status'])
def cmd_status(message):
    Alert = Query()
    alerts = alerts_table.search((Alert.user_id == message.from_user.id) & (Alert.status == 'active'))

    if not alerts:
        bot.reply_to(message, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
        return

    text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n\n"
    now = datetime.now()
    for alert in alerts:
        direction = "–ø–∞–¥–µ–Ω–∏–µ" if alert["direction"] == "down" else "—Ä–æ—Å—Ç"
        alert_time = datetime.fromisoformat(alert["alert_time"])
        remaining = alert_time - now
        mins = int(remaining.total_seconds() // 60)
        secs = int(remaining.total_seconds() % 60)
        
        if mins < 0:
            text += (
                f"‚Ä¢ {alert['resource']} ‚Üí {alert['target_price']:.2f} ({direction})\n"
                f"  –î–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å: {alert_time.strftime('%H:%M:%S')}\n\n"
            )
        else:
            text += (
                f"‚Ä¢ {alert['resource']} ‚Üí {alert['target_price']:.2f} ({direction})\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å: {mins} –º–∏–Ω. {secs} —Å–µ–∫.\n"
                f"  –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤: {alert_time.strftime('%H:%M:%S')}\n\n"
            )

    bot.reply_to(message, text)


# –ö–æ–º–∞–Ω–¥–∞ /history
@bot.message_handler(commands=['history'])
def cmd_history(message):
    try:
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        resource = args[0] if len(args) > 0 else None
        hours = int(args[1]) if len(args) > 1 else 24
        
        if not resource:
            bot.reply_to(message,
                "–£–∫–∞–∂–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/history –î–µ—Ä–µ–≤–æ\n"
                "/history –ö–∞–º–µ–Ω—å 12  (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)"
            )
            return
        
        user_id = message.from_user.id
        bonus = get_user_bonus(user_id)
        MarketData = Query()
        cutoff_time = int((datetime.now() - timedelta(hours=hours)).timestamp())
        records = market_table.search(
            (MarketData.resource == resource) & (MarketData.timestamp >= cutoff_time)
        )
        
        if not records:
            bot.reply_to(message, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤.")
            return
            
        records.sort(key=lambda x: x['timestamp'])
        
        text = f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n"
        
        current_hour = None
        for record in records[-10:]:
            record_time = datetime.fromtimestamp(record['timestamp'])
            hour_str = record_time.strftime("%H:00")
            
            if hour_str != current_hour:
                text += f"\nüïê {hour_str}:\n"
                current_hour = hour_str
                
            time_str = record_time.strftime("%H:%M")
            adj_buy, adj_sell = adjust_prices_for_user(user_id, record['buy'], record['sell'])
            text += f"  {time_str} - –ö—É–ø–∏—Ç—å: {adj_buy:.2f}, –ü—Ä–æ–¥–∞—Ç—å: {adj_sell:.2f}\n"
        
        recent_records = get_recent_data(resource, minutes=60)
        if recent_records and len(recent_records) >= 2:
            speed = calculate_speed(recent_records, "buy")
            adj_speed = speed / (1 + bonus) if speed is not None else None
            trend = get_trend(recent_records, "buy")
            trend_text = "—Ä–∞—Å—Ç—ë—Ç üìà" if trend == "up" else "–ø–∞–¥–∞–µ—Ç üìâ" if trend == "down" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞ ‚û°Ô∏è"
            speed_str = f"{adj_speed:+.4f}" if adj_speed is not None else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"\n–¢—Ä–µ–Ω–¥: {trend_text} ({speed_str}/–º–∏–Ω)"
        
        bot.reply_to(message, text)
        
    except ValueError:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /history <—Ä–µ—Å—É—Ä—Å> [—á–∞—Å—ã]")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /history: {e}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω.")


# –ö–æ–º–∞–Ω–¥–∞ /cancel
@bot.message_handler(commands=['cancel'])
def cmd_cancel(message):
    Alert = Query()
    alerts = alerts_table.search((Alert.user_id == message.from_user.id) & (Alert.status == 'active'))
    
    if not alerts:
        bot.reply_to(message, "üóëÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
        
    for alert in alerts:
        alerts_table.update({'status': 'cancelled'}, doc_ids=[alert.doc_id])
    
    bot.reply_to(message, f"üóëÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ {len(alerts)} –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")


# –ö–æ–º–∞–Ω–¥–∞ /settings
@bot.message_handler(commands=['settings'])
def cmd_settings(message):
    user_id = message.from_user.id
    user_states[user_id] = STATE_SETTINGS_ANCHOR
    user_data[user_id] = {}
    
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, –µ—Å—Ç—å –Ø–∫–æ—Ä—å", callback_data="anchor_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="anchor_no")]
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    
    bot.reply_to(message, "‚öìÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–æ–≤: –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ø–∫–æ—Ä—å (–≤—ã–≥–æ–¥–∞ +2%)?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∫–æ—Ä—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('anchor_') and user_states.get(call.from_user.id) == STATE_SETTINGS_ANCHOR)
def process_anchor_selection(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    has_anchor = call.data == "anchor_yes"
    
    user_data[user_id]["has_anchor"] = has_anchor
    user_states[user_id] = STATE_SETTINGS_TRADE_LEVEL
    
    bot.send_message(
        user_id,
        "‚öñÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏—è '–û—Å–Ω–æ–≤—ã —Ç–æ—Ä–≥–æ–≤–ª–∏' (0-10, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3):"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —É—Ä–æ–≤–Ω—è —Ç–æ—Ä–≥–æ–≤–ª–∏
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == STATE_SETTINGS_TRADE_LEVEL)
def process_trade_level(message):
    user_id = message.from_user.id
    try:
        trade_level = int(message.text.strip())
        if trade_level < 0 or trade_level > 10:
            bot.reply_to(message, "‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10.")
            return
    except ValueError:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (0-10).")
        return

    has_anchor = user_data[user_id]["has_anchor"]
    save_user_settings(user_id, has_anchor, trade_level)
    
    bonus = get_user_bonus(user_id)
    bonus_text = f"{bonus * 100:.0f}%" if bonus > 0 else "0%"
    
    bot.reply_to(
        message,
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
        f"–Ø–∫–æ—Ä—å: {'‚úÖ' if has_anchor else '‚ùå'}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ç–æ—Ä–≥–æ–≤–ª–∏: {trade_level}\n"
        f"–û–±—â–∞—è –≤—ã–≥–æ–¥–∞ –Ω–∞ —Ü–µ–Ω—ã: {bonus_text}"
    )
    
    user_states.pop(user_id, None)
    user_data.pop(user_id, None)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def cmd_help(message):
    help_text = (
        "üìñ –ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n"
        "1. –ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å —ç–º–æ–¥–∑–∏ üé™.\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã: –î–µ—Ä–µ–≤–æ, –ö–∞–º–µ–Ω—å, –ü—Ä–æ–≤–∏–∑–∏—è, –õ–æ—à–∞–¥–∏.\n"
        "‚Ä¢ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∫–æ–ø–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –∑–∞ 15 –º–∏–Ω—É—Ç), –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ä–æ—Å—Ç üìà –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ üìâ —Ü–µ–Ω—ã.\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.\n"
        "‚Ä¢ –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–∏!\n\n"
        "3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n"
        "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –¥–æ –∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.\n"
        "‚Ä¢ /history <—Ä–µ—Å—É—Ä—Å> [—á–∞—Å—ã] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω. –ü—Ä–∏–º–µ—Ä: /history –î–µ—Ä–µ–≤–æ 6.\n"
        "‚Ä¢ /stat ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—ã–Ω–∫–∞ –∏ –º–∞–∫—Å–∏–º—É–º—ã –∑–∞ –Ω–µ–¥–µ–ª—é.\n"
        "‚Ä¢ /settings ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–Ω—É—Å—ã –æ—Ç –Ø–∫–æ—Ä—è –∏ –∑–Ω–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏.\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n\n"
        "4. –í–∞–∂–Ω–æ:\n"
        "‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω. –ß–µ–º —á–∞—â–µ –≤—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n"
        "‚Ä¢ –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–µ–∑–∫–æ –∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–æ–≤—Ä–µ–º—è) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ —á–∞—Å."
    )
    bot.reply_to(message, help_text)


# –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–Ω–∞ –±–∞–∑–æ–≤—ã—Ö —Ü–µ–Ω–∞—Ö)
def calculate_speed(records: List[Dict], price_type: str = "buy") -> Optional[float]:
    if len(records) < 2:
        return None

    first = records[0]
    last = records[-1]

    price_delta = last[price_type] - first[price_type]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0

    if time_delta_minutes < 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        return None

    speed = price_delta / time_delta_minutes
    return round(speed, 4)


# –ö–æ–º–∞–Ω–¥–∞ /stat ‚Äî —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
@bot.message_handler(commands=['stat'])
def cmd_stat(message):
    try:
        user_id = message.from_user.id
        bonus = get_user_bonus(user_id)
        now = datetime.now()
        text = (
            f"<b>üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞</b>\n"
            f"üïó –û–±–Ω–æ–≤–ª–µ–Ω–æ: {now.strftime('%d.%m.%Y %H:%M')}\n"
            f"üíé –ë–æ–Ω—É—Å –∏–≥—Ä–æ–∫–∞: {bonus * 100:.0f}%\n"
            f"{'‚îÄ' * 22}\n\n"
        )

        resources = list(EMOJI_TO_RESOURCE.values())
        week_ago = int((now - timedelta(days=7)).timestamp())

        RESOURCE_EMOJI = {
            "–î–µ—Ä–µ–≤–æ": "ü™µ",
            "–ö–∞–º–µ–Ω—å": "ü™®",
            "–ü—Ä–æ–≤–∏–∑–∏—è": "üçû",
            "–õ–æ—à–∞–¥–∏": "üê¥"
        }

        for resource in resources:
            emoji = RESOURCE_EMOJI.get(resource, "üî∏")
            latest = get_latest_data(resource)
            if not latest:
                text += f"{emoji} <b>{resource}</b> ‚Äî ‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                continue

            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ü–µ–Ω—ã (–±–∞–∑–æ–≤—ã–µ)
            last_buy = latest['buy']
            last_sell = latest['sell']
            last_timestamp = latest['timestamp']

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            adj_buy, adj_sell = adjust_prices_for_user(user_id, last_buy, last_sell)

            MarketData = Query()
            week_records = market_table.search(
                (MarketData.resource == resource) & (MarketData.timestamp >= week_ago)
            )

            if week_records:
                week_adj_buy = [adjust_prices_for_user(user_id, r['buy'], r['sell'])[0] for r in week_records]
                week_adj_sell = [adjust_prices_for_user(user_id, r['buy'], r['sell'])[1] for r in week_records]
                max_buy = max(week_adj_buy)
                max_sell = max(week_adj_sell)
                min_buy = min(week_adj_buy)
                min_sell = min(week_adj_sell)
                max_qty = max((r.get('quantity', 0) for r in week_records), default=0)
            else:
                max_buy = min_buy = adj_buy
                max_sell = min_sell = adj_sell
                max_qty = 0

            # üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¢–ï–ö–£–©–£–Æ —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç
            recent = get_recent_data(resource, minutes=60)
            current_buy = adj_buy  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            current_sell = adj_sell
            trend_desc = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            trend_icon = "‚è∏Ô∏è"

            if len(recent) >= 2:
                speed_buy = calculate_speed(recent, "buy")
                speed_sell = calculate_speed(recent, "sell")
                trend_buy = get_trend(recent, "buy")
                adj_speed_buy = speed_buy / (1 + bonus) if speed_buy is not None else None
                adj_speed_sell = speed_sell * (1 + bonus) if speed_sell is not None else None

                # –≠–∫—Å—Ç—Ä–∞–ø–æ–ª–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é)
                elapsed_minutes = (now.timestamp() - last_timestamp) / 60.0
                if speed_buy is not None and elapsed_minutes > 0.1:
                    current_buy = adj_buy + (adj_speed_buy * elapsed_minutes)
                if speed_sell is not None and elapsed_minutes > 0.1:
                    current_sell = adj_sell + (adj_speed_sell * elapsed_minutes)

                # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
                if trend_buy == "up":
                    trend_icon = "üìà"
                    trend_desc = f"—Ä–∞—Å—Ç—ë—Ç ({adj_speed_buy:+.4f}/–º–∏–Ω)"
                elif trend_buy == "down":
                    trend_icon = "üìâ"
                    trend_desc = f"–ø–∞–¥–∞–µ—Ç ({adj_speed_buy:+.4f}/–º–∏–Ω)"
                else:
                    trend_icon = "‚ûñ"
                    trend_desc = "—Å—Ç–∞–±–∏–ª–µ–Ω"

            # –§–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            qty_str = f"{max_qty:,}".replace(",", " ") if max_qty > 0 else "–Ω–µ —É—á—Ç–µ–Ω–æ"

            # üñãÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
            text += (
                f"{emoji} <b>{resource}</b>\n"
                f"‚îú üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.fromtimestamp(last_timestamp).strftime('%H:%M')}\n"
                f"‚îú üíπ –ü–æ–∫—É–ø–∫–∞:   {current_buy:>7.3f} (–±—ã–ª–æ: {adj_buy:.3f})\n"
                f"‚îÇ   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {min_buy:.3f} ‚Äî {max_buy:.3f}\n"
                f"‚îú üí∞ –ü—Ä–æ–¥–∞–∂–∞:  {current_sell:>7.3f} (–±—ã–ª–æ: {adj_sell:.3f})\n"
                f"‚îÇ   –î–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –Ω–µ–¥–µ–ª—é: {min_sell:.3f} ‚Äî {max_sell:.3f}\n"
                f"‚îú üì¶ –ú–∞–∫—Å. –æ–±—ä—ë–º: {qty_str:>12} —à—Ç.\n"
                f"‚îî üìä –¢—Ä–µ–Ω–¥: {trend_icon} {trend_desc}\n\n"
            )

        # –ü–æ–¥–≤–∞–ª
        text += f"{'‚îÄ' * 22}\n"
        text += f"üìà ‚Äî —Ä–æ—Å—Ç | üìâ ‚Äî –ø–∞–¥–µ–Ω–∏–µ | ‚ûñ ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
        text += f"–¶–µ–Ω—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –∏–≥—Ä–æ–∫–∞ ({bonus * 100:.0f}%)."

        bot.reply_to(message, text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stat: {e}", exc_info=True)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ /timer [–í–∏–¥ –†–µ—Å—É—Ä—Å–∞] [—Ü–µ–ª—å —Ü–µ–Ω—ã]
@bot.message_handler(commands=['timer'])
def cmd_timer(message):
    try:
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        if len(args) != 2:
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞>\n–ü—Ä–∏–º–µ—Ä: /timer –î–µ—Ä–µ–≤–æ 8.50")
            return

        resource = args[0].capitalize()
        if resource not in EMOJI_TO_RESOURCE.values():
            bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Å—É—Ä—Å. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(EMOJI_TO_RESOURCE.values())}")
            return

        try:
            target_price = float(args[1].replace(',', '.'))
            if target_price <= 0:
                bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8.50).")
            return

        user_id = message.from_user.id
        bonus = get_user_bonus(user_id)
        records = get_recent_data(resource, minutes=15)
        if len(records) < 2:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resource}. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.")
            return

        latest = get_latest_data(resource)
        current_price = latest["buy"]
        adjusted_buy, _ = adjust_prices_for_user(user_id, current_price, latest["sell"])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction = "down" if target_price < adjusted_buy else "up"
        
        speed = calculate_speed(records, "buy")
        if speed is None:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
            return

        adj_speed = speed / (1 + bonus) if direction == "down" else speed / (1 + bonus)
        
        if (direction == "down" and target_price >= adjusted_buy) or \
           (direction == "up" and target_price <= adjusted_buy):
            bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–∏ {('–ø–∞–¥–µ–Ω–∏–∏' if direction == 'down' else '—Ä–æ—Å—Ç–µ')} —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {('–Ω–∏–∂–µ' if direction == 'down' else '–≤—ã—à–µ')} —Ç–µ–∫—É—â–µ–π ({adjusted_buy:.2f}).")
            return

        trend = get_trend(records, "buy")
        if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
            bot.reply_to(message,
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–¥—É. "
                "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")

        if (direction == "down" and adj_speed >= 0) or (direction == "up" and adj_speed <= 0):
            bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–π —Ü–µ–ª–∏. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        price_diff = target_price - adjusted_buy
        time_minutes = abs(price_diff) / abs(adj_speed)
        alert_time = datetime.now() + timedelta(minutes=time_minutes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        chat_id = message.chat.id if message.chat.type in ['group', 'supergroup'] else None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        if chat_id and chat_id != user_id:
            try:
                bot.get_chat(chat_id)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É {chat_id}: {e}")
                bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç.")
                chat_id = None
        
        alert_id = alerts_table.insert({
            "user_id": user_id,
            "resource": resource,
            "target_price": target_price,
            "direction": direction,
            "speed": adj_speed,
            "current_price": adjusted_buy,
            "alert_time": alert_time.isoformat(),
            "created_at": datetime.now().isoformat(),
            "status": "active",
            "chat_id": chat_id,
            "last_checked": datetime.now().isoformat()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        })

        alert_time_str = alert_time.strftime("%H:%M:%S")
        
        bot.reply_to(
            message,
            f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            f"–†–µ—Å—É—Ä—Å: {resource}\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {adjusted_buy:.2f}\n"
            f"–¶–µ–ª—å: {target_price:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'})\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {adj_speed:+.4f} –≤ –º–∏–Ω—É—Ç—É\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(time_minutes)} –º–∏–Ω.\n"
            f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {alert_time_str}\n\n"
            f"–ë–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–∏."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞: {e}", exc_info=True)
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞–π–º–µ—Ä–∞.")

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
def check_trend_changes():
    while True:
        try:
            Alert = Query()
            active_alerts = alerts_table.search(Alert.status == 'active')
            
            for alert in active_alerts:
                user_id = alert['user_id']
                resource = alert['resource']
                direction = alert['direction']
                target_price = alert['target_price']
                chat_id = alert.get('chat_id')

                records = get_recent_data(resource, minutes=15)
                if len(records) < 2:
                    continue

                current_trend = get_trend(records, "buy")
                if (direction == "down" and current_trend == "up") or \
                   (direction == "up" and current_trend == "down"):
                    latest_data = get_latest_data(resource)
                    current_price, _ = adjust_prices_for_user(user_id, latest_data['buy'], latest_data['sell'])
                    
                    notification_text = (
                        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢—Ä–µ–Ω–¥ –¥–ª—è {resource} –∏–∑–º–µ–Ω–∏–ª—Å—è!\n"
                        f"–í—ã –∂–¥–µ—Ç–µ {'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'} –¥–æ {target_price:.2f}, "
                        f"–Ω–æ —Ü–µ–Ω–∞ —Å–µ–π—á–∞—Å {'—Ä–∞—Å—Ç–µ—Ç' if current_trend == 'up' else '–ø–∞–¥–∞–µ—Ç'}.\n"
                        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n"
                        f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å."
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    bot.send_message(user_id, notification_text)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    if chat_id and chat_id != user_id:
                        try:
                            bot.send_message(
                                chat_id,
                                f"@{bot.get_chat_member(user_id, user_id).user.username or 'User'} {notification_text}"
                            )
                        except Exception as e:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç {chat_id}: {e}")

                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    alerts_table.update({'status': 'trend_changed'}, doc_ids=[alert.doc_id])

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞: {e}")

        time.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
def start_background_tasks():
    threading.Thread(target=cleanup_expired_alerts, daemon=True).start()
    threading.Thread(target=check_trend_changes, daemon=True).start()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    start_background_tasks()
    bot.polling(none_stop=True, interval=0, timeout=20)
