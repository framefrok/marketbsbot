import asyncio
import logging
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Union

from aiogram.filters import Command

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram import F
from tinydb import TinyDB, Query, where
from dotenv import load_dotenv
import os
import math

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = TinyDB('database.json')
market_table = db.table('market_data')
alerts_table = db.table('alerts')

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AlertSetup(StatesGroup):
    choosing_resource = State()
    choosing_direction = State()  # "up" –∏–ª–∏ "down"
    entering_target_price = State()

# –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞
def parse_market_message(text: str) -> Optional[Dict[str, Dict[str, float]]]:
    """
    –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {
        "–î–µ—Ä–µ–≤–æ": {"buy": 11.0, "sell": 9.0},
        "–ö–∞–º–µ–Ω—å": {"buy": 9.45, "sell": 7.73},
        ...
    }
    """
    lines = text.strip().split('\n')
    resource_pattern = r"^(.+?):.*?([0-9,]+)([ü™µü™®üçûüê¥])$"
    price_pattern = r"([üìàüìâ])?.*?–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å:\s*([0-9.,]+)\s*/\s*([0-9.,]+).*?üí∞"

    resources = {}
    current_resource = None

    for line in lines:
        line = line.strip()
        if not line or line == "üé™ –†—ã–Ω–æ–∫":
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ä–µ—Å—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–î–µ—Ä–µ–≤–æ: 2,580,444ü™µ")
        res_match = re.match(resource_pattern, line)
        if res_match:
            resource_name = res_match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º —Å–º–∞–π–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            emoji_map = {"ü™µ": "–î–µ—Ä–µ–≤–æ", "ü™®": "–ö–∞–º–µ–Ω—å", "üçû": "–ü—Ä–æ–≤–∏–∑–∏—è", "üê¥": "–õ–æ—à–∞–¥–∏"}
            emoji = res_match.group(3)
            normalized_name = emoji_map.get(emoji, resource_name)
            current_resource = normalized_name
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üìà–ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å: 11/9üí∞")
        price_match = re.search(price_pattern, line)
        if price_match and current_resource:
            # trend = price_match.group(1)  # üìà –∏–ª–∏ üìâ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö)
            buy_price = float(price_match.group(2).replace(',', '.'))
            sell_price = float(price_match.group(3).replace(',', '.'))
            resources[current_resource] = {
                "buy": buy_price,
                "sell": sell_price
            }
            current_resource = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏

    return resources if resources else None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
def get_recent_data(resource: str, minutes: int = 15) -> List[Dict]:
    MarketData = Query()
    cutoff_time = int((datetime.now() - timedelta(minutes=minutes)).timestamp())
    records = market_table.search(
        (MarketData.resource == resource) & (MarketData.timestamp >= cutoff_time)
    )
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    records.sort(key=lambda x: x['timestamp'])
    return records

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
def get_latest_data(resource: str) -> Optional[Dict]:
    MarketData = Query()
    records = market_table.search(MarketData.resource == resource)
    if not records:
        return None
    records.sort(key=lambda x: x['timestamp'], reverse=True)
    return records[0]

# –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
def calculate_speed(records: List[Dict], price_type: str = "buy") -> Optional[float]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –º–∏–Ω—É—Ç—É.
    –ï—Å–ª–∏ —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
    """
    if len(records) < 2:
        return None

    first = records[0]
    last = records[-1]

    price_delta = last[price_type] - first[price_type]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0

    if time_delta_minutes == 0:
        return None

    speed = price_delta / time_delta_minutes
    return round(speed, 4)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞
def get_trend(records: List[Dict], price_type: str = "buy") -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if len(records) < 2:
        return "stable"
    
    first = records[0][price_type]
    last = records[-1][price_type]
    
    if last > first:
        return "up"
    elif last < first:
        return "down"
    else:
        return "stable"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–∞ —Å —Ä—ã–Ω–∫–æ–º
@dp.message(F.text.startswith('üé™ –†—ã–Ω–æ–∫') | F.forward_from)
async def handle_market_forward(message: types.Message):
    try:
        data = parse_market_message(message.text)
        if not data:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤–µ—Ä–Ω—ã–π.")
            return

        timestamp = int(message.date.timestamp())
        saved_count = 0

        for resource, prices in data.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º timestamp –∏ resource
            MarketData = Query()
            existing = market_table.get(
                (MarketData.resource == resource) & (MarketData.timestamp == timestamp)
            )
            
            if not existing:
                market_table.insert({
                    "user_id": message.from_user.id,
                    "resource": resource,
                    "buy": prices["buy"],
                    "sell": prices["sell"],
                    "timestamp": timestamp,
                    "date": datetime.fromtimestamp(timestamp).isoformat()
                })
                saved_count += 1

        if saved_count > 0:
            await message.reply(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∑–∞–ø–∏—Å–µ–π —Ä—ã–Ω–∫–∞.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
            any_recent = False
            for resource in ["–î–µ—Ä–µ–≤–æ", "–ö–∞–º–µ–Ω—å", "–ü—Ä–æ–≤–∏–∑–∏—è", "–õ–æ—à–∞–¥–∏"]:
                if len(get_recent_data(resource)) >= 2:
                    any_recent = True
                    break

            if any_recent:
                await send_resource_selection(message.from_user.id)
        else:
            await message.reply("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞–Ω–µ–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä—ã–Ω–∫–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
async def send_resource_selection(user_id: int):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []
    for resource in ["–î–µ—Ä–µ–≤–æ", "–ö–∞–º–µ–Ω—å", "–ü—Ä–æ–≤–∏–∑–∏—è", "–õ–æ—à–∞–¥–∏"]:
        btn = InlineKeyboardButton(text=resource, callback_data=f"resource_{resource}")
        buttons.append([btn])  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await bot.send_message(user_id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–∞
@dp.callback_query(F.data.startswith('resource_'))
async def process_resource_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    resource = callback_query.data.split('_')[1]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
    records = get_recent_data(resource)
    if len(records) < 2:
        await bot.send_message(callback_query.from_user.id, 
                              f"‚ö†Ô∏è –î–ª—è {resource} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
    await state.update_data(resource=resource)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Ç—Ä–µ–Ω–¥
    speed = calculate_speed(records, "buy")
    trend = get_trend(records, "buy")
    current_price = records[-1]["buy"]
    
    trend_emoji = "üìà" if trend == "up" else "üìâ" if trend == "down" else "‚û°Ô∏è"
    trend_text = "—Ä–∞—Å—Ç—ë—Ç" if trend == "up" else "–ø–∞–¥–∞–µ—Ç" if trend == "down" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons = [
        [InlineKeyboardButton(text="üìâ –ü–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã", callback_data="direction_down")],
        [InlineKeyboardButton(text="üìà –†–æ—Å—Ç —Ü–µ–Ω—ã", callback_data="direction_up")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await bot.send_message(
        callback_query.from_user.id, 
        f"{trend_emoji} –í—ã –≤—ã–±—Ä–∞–ª–∏ {resource}. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price}\n"
        f"–¢—Ä–µ–Ω–¥: {trend_text} ({abs(speed):.4f} –≤ –º–∏–Ω—É—Ç—É)\n\n"
        f"–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", 
        reply_markup=keyboard
    )
    await state.set_state(AlertSetup.choosing_direction)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π
@dp.callback_query(F.data == 'cancel_action')
async def cancel_action(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    await bot.send_message(callback_query.from_user.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith('direction_'), AlertSetup.choosing_direction)
async def process_direction_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    direction = "down" if callback_query.data == "direction_down" else "up"
    
    user_data = await state.get_data()
    resource = user_data["resource"]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Å—É—Ä—Å–∞
    records = get_recent_data(resource)
    current_price = records[-1]["buy"]
    trend = get_trend(records, "buy")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (direction == "down" and trend != "down") or (direction == "up" and trend != "up"):
        trend_text = "–ø–∞–¥–∞–µ—Ç" if trend == "down" else "—Ä–∞—Å—Ç—ë—Ç" if trend == "up" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞"
        await bot.send_message(
            callback_query.from_user.id,
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¶–µ–Ω–∞ {resource} —Å–µ–π—á–∞—Å {trend_text}, –∞ –≤—ã –≤—ã–±—Ä–∞–ª–∏ "
            f"{'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'}. –£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
    
    await state.update_data(direction=direction)
    await bot.send_message(
        callback_query.from_user.id, 
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è {resource} (–Ω–∞–ø—Ä–∏–º–µ—Ä: {current_price * 0.9:.2f}):"
    )
    await state.set_state(AlertSetup.entering_target_price)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
@dp.message(AlertSetup.entering_target_price)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã
@dp.message(AlertSetup.entering_target_price)
async def process_target_price(message: types.Message, state: FSMContext):
    try:
        target_price = float(message.text.strip().replace(',', '.'))
        if target_price <= 0:
            await message.reply("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.55).")
        return

    user_data = await state.get_data()
    resource = user_data["resource"]
    direction = user_data["direction"]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    records = get_recent_data(resource)
    if len(records) < 2:
        await message.reply("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä—ã–Ω–∫–∞.")
        await state.clear()
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ buy-—Ü–µ–Ω–µ
    speed = calculate_speed(records, "buy")
    if speed is None:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.")
        await state.clear()
        return

    current_price = records[-1]["buy"]
    price_diff = target_price - current_price

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (direction == "down" and target_price >= current_price) or \
       (direction == "up" and target_price <= current_price):
        await message.reply(f"‚ö†Ô∏è –ü—Ä–∏ {('–ø–∞–¥–µ–Ω–∏–∏' if direction == 'down' else '—Ä–æ—Å—Ç–µ')} —Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {('–Ω–∏–∂–µ' if direction == 'down' else '–≤—ã—à–µ')} —Ç–µ–∫—É—â–µ–π ({current_price}).")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç—Ä–µ–Ω–¥–∞
    trend = get_trend(records, "buy")
    if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
        await message.reply("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–Ω–¥—É. "
                          "–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å.")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–ß–ê–õ–û ---
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–≤–∏–∂–µ—Ç—Å—è –ª–∏ —Ü–µ–Ω–∞ –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    if (direction == "down" and speed >= 0) or (direction == "up" and speed <= 0):
        await message.reply("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ —Ç—É —Å—Ç–æ—Ä–æ–Ω—É, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –≤–∞—à–µ–π —Ü–µ–ª–∏. –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        await state.clear()
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    time_minutes = abs(price_diff) / abs(speed)
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ù–ï–¶ ---

    alert_time = datetime.now() + timedelta(minutes=time_minutes)
    alert_id = alerts_table.insert({
        "user_id": message.from_user.id,
        "resource": resource,
        "target_price": target_price,
        "direction": direction,
        "speed": speed,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ –∑–Ω–∞–∫–æ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        "current_price": current_price,
        "alert_time": alert_time.isoformat(),
        "created_at": datetime.now().isoformat(),
        "status": "active"
    })

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    alert_time_str = alert_time.strftime("%H:%M:%S")
    
    await message.reply(
        f"‚úÖ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        f"–†–µ—Å—É—Ä—Å: {resource}\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n"
        f"–¶–µ–ª—å: {target_price:.2f} ({'–ø–∞–¥–µ–Ω–∏–µ' if direction == 'down' else '—Ä–æ—Å—Ç'})\n"
        f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:+.4f} –≤ –º–∏–Ω—É—Ç—É\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: ~{int(time_minutes)} –º–∏–Ω.\n"
        f"–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {alert_time_str}\n\n"
        f"–ë–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–∏."
    )

    await state.clear()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    asyncio.create_task(schedule_alert(alert_id, message.from_user.id, resource, target_price, alert_time))

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def schedule_alert(alert_id: int, user_id: int, resource: str, target_price: float, alert_time: datetime):
    now = datetime.now()
    sleep_seconds = (alert_time - now).total_seconds()

    if sleep_seconds > 0:
        await asyncio.sleep(sleep_seconds)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∞–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
    Alert = Query()
    alert = alerts_table.get(doc_id=alert_id)
    if not alert or alert.get('status') != 'active':
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –Ω–∞ –º–æ–º–µ–Ω—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        latest_data = get_latest_data(resource)
        if not latest_data:
            raise ValueError(f"No latest data found for resource: {resource}")

        current_price = latest_data['buy']
        direction = alert['direction']

        # --- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –î–û–°–¢–ò–ì–ù–£–¢–ê –õ–ò –¶–ï–õ–¨? ---
        is_target_reached = False
        if direction == "down" and current_price <= target_price:
            is_target_reached = True
        elif direction == "up" and current_price >= target_price:
            is_target_reached = True

        if is_target_reached:
            await bot.send_message(
                user_id,
                f"üîî {resource} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã!\n"
                f"–¶–µ–ª—å: {target_price:.2f}\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n\n"
                f"–í—Ä–µ–º—è {'–ø–æ–∫—É–ø–∞—Ç—å!' if direction == 'down' else '–ø—Ä–æ–¥–∞–≤–∞—Ç—å!'}"
            )
            alerts_table.update({'status': 'completed'}, doc_ids=[alert_id])
        else:
            # –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ä—ã–Ω–æ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è
            await bot.send_message(
                user_id,
                f"‚è∞ –¢–∞–π–º–µ—Ä –¥–ª—è {resource} —Å—Ä–∞–±–æ—Ç–∞–ª, –Ω–æ —Ü–µ–ª—å ({target_price:.2f}) "
                f"–µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}).\n"
                f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä—ã–Ω–∫–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
            )
            alerts_table.update({'status': 'expired'}, doc_ids=[alert_id])
        # --- –ö–û–ù–ï–¶ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ô –ü–†–û–í–ï–†–ö–ò ---

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        alerts_table.update({'status': 'error'}, doc_ids=[alert_id])

async def cleanup_expired_alerts():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.
    –£–¥–∞–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ:
    - –∞–∫—Ç–∏–≤–Ω—ã (status == 'active')
    - –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (alert_time) –±—ã–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    """
    while True:
        try:
            Alert = Query()
            now = datetime.now()
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            cutoff_time = (now - timedelta(hours=1)).isoformat()
            expired_alerts = alerts_table.search(
                (Alert.status == 'active') &
                (Alert.alert_time < cutoff_time)
            )

            if expired_alerts:
                expired_ids = [alert.doc_id for alert in expired_alerts]
                # –ü–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ 'cleanup_expired' –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                alerts_table.update({'status': 'cleanup_expired'}, doc_ids=expired_ids)
                logger.info(f"–û—á–∏—Å—Ç–∫–∞: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(expired_ids)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤: {e}")

        # –ñ–¥–µ–º 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(600)  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ –≤ –∏–≥—Ä–µ.\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–æ–º (—Å —ç–º–æ–¥–∑–∏ üé™), –∏ —è –Ω–∞—á–Ω—É –∞–Ω–∞–ª–∏–∑.\n"
        "–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–µ–¥–ª–æ–∂—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        
    )

# –ö–æ–º–∞–Ω–¥–∞ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    Alert = Query()
    alerts = alerts_table.search((Alert.user_id == message.from_user.id) & (Alert.status == 'active'))

    if not alerts:
        await message.reply("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")
        return

    text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:\n\n"
    for alert in alerts:
        direction = "–ø–∞–¥–µ–Ω–∏–µ" if alert["direction"] == "down" else "—Ä–æ—Å—Ç"
        alert_time = datetime.fromisoformat(alert["alert_time"])
        remaining = alert_time - datetime.now()
        mins = int(remaining.total_seconds() // 60)
        secs = int(remaining.total_seconds() % 60)
        
        if mins < 0:
            text += (
                f"‚Ä¢ {alert['resource']} ‚Üí {alert['target_price']:.2f} ({direction})\n"
                f"  –î–æ–ª–∂–Ω–æ –±—ã–ª–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å: {alert_time.strftime('%H:%M:%S')}\n\n"
            )
        else:
            text += (
                f"‚Ä¢ {alert['resource']} ‚Üí {alert['target_price']:.2f} ({direction})\n"
                f"  –û—Å—Ç–∞–ª–æ—Å—å: {mins} –º–∏–Ω. {secs} —Å–µ–∫.\n"
                f"  –°—Ä–∞–±–æ—Ç–∞–µ—Ç –≤: {alert_time.strftime('%H:%M:%S')}\n\n"
            )

    await message.reply(text)

# –ö–æ–º–∞–Ω–¥–∞ /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
@dp.message(Command("history"))
async def cmd_history(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:] if len(message.text.split()) > 1 else []
        resource = args[0] if len(args) > 0 else None
        hours = int(args[1]) if len(args) > 1 else 24
        
        if not resource:
            await message.reply(
                "–£–∫–∞–∂–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/history –î–µ—Ä–µ–≤–æ\n"
                "/history –ö–∞–º–µ–Ω—å 12  (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤)"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        MarketData = Query()
        cutoff_time = int((datetime.now() - timedelta(hours=hours)).timestamp())
        records = market_table.search(
            (MarketData.resource == resource) & (MarketData.timestamp >= cutoff_time)
        )
        
        if not records:
            await message.reply(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤.")
            return
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        records.sort(key=lambda x: x['timestamp'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        text = f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –Ω–∞ {resource} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        current_hour = None
        for record in records[-10:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            record_time = datetime.fromtimestamp(record['timestamp'])
            hour_str = record_time.strftime("%H:00")
            
            if hour_str != current_hour:
                text += f"\nüïê {hour_str}:\n"
                current_hour = hour_str
                
            time_str = record_time.strftime("%H:%M")
            text += f"  {time_str} - –ö—É–ø–∏—Ç—å: {record['buy']:.2f}, –ü—Ä–æ–¥–∞—Ç—å: {record['sell']:.2f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–Ω–¥–µ
        recent_records = get_recent_data(resource, minutes=60)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        if recent_records and len(recent_records) >= 2:
            speed = calculate_speed(recent_records, "buy")
            trend = get_trend(recent_records, "buy")
            trend_text = "—Ä–∞—Å—Ç—ë—Ç üìà" if trend == "up" else "–ø–∞–¥–∞–µ—Ç üìâ" if trend == "down" else "—Å—Ç–∞–±–∏–ª—å–Ω–∞ ‚û°Ô∏è"
            text += f"\n–¢—Ä–µ–Ω–¥: {trend_text} ({speed:+.4f}/–º–∏–Ω)"
        
        await message.reply(text)
        
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /history <—Ä–µ—Å—É—Ä—Å> [—á–∞—Å—ã]")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /history: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message):
    Alert = Query()
    alerts = alerts_table.search((Alert.user_id == message.from_user.id) & (Alert.status == 'active'))
    
    if not alerts:
        await message.reply("üóëÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
        
    # –ü–æ–º–µ—á–∞–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
    for alert in alerts:
        alerts_table.update({'status': 'cancelled'}, doc_ids=[alert.doc_id])
    
    await message.reply(f"üóëÔ∏è –û—Ç–º–µ–Ω–µ–Ω–æ {len(alerts)} –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üìñ <b>–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>1. –ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –≤ —á–∞—Ç –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä—ã–Ω–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å —ç–º–æ–¥–∑–∏ üé™.\n"
        "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ü–µ–Ω—ã –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã: –î–µ—Ä–µ–≤–æ, –ö–∞–º–µ–Ω—å, –ü—Ä–æ–≤–∏–∑–∏—è, –õ–æ—à–∞–¥–∏.\n"
        "‚Ä¢ –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∫–æ–ø–∏—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –∑–∞ 15 –º–∏–Ω—É—Ç), –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ.\n\n"
        "<b>2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Ä–æ—Å—Ç üìà –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ üìâ —Ü–µ–Ω—ã.\n"
        "‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É.\n"
        "‚Ä¢ –ë–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏ –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–Ω–µ—Ç —Ü–µ–ª–∏!\n\n"
        "<b>3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.\n"
        "‚Ä¢ /help ‚Äî —ç—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.\n"
        "‚Ä¢ /status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –¥–æ –∏—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.\n"
        "‚Ä¢ /history <—Ä–µ—Å—É—Ä—Å> [—á–∞—Å—ã] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω. –ü—Ä–∏–º–µ—Ä: `/history –î–µ—Ä–µ–≤–æ 6`.\n"
        "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.\n\n"
        "<b>4. –í–∞–∂–Ω–æ:</b>\n"
        "‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ <i>–≤–∞—à–µ–π –ª–∏—á–Ω–æ–π</i> –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω. –ß–µ–º —á–∞—â–µ –≤—ã –ø—Ä–∏—Å—ã–ª–∞–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.\n"
        "‚Ä¢ –ï—Å–ª–∏ —Ü–µ–Ω–∞ —Ä–µ–∑–∫–æ –∏–∑–º–µ–Ω–∏–ª–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è, –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≤ —Ä–∞—Å—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–æ–≤—Ä–µ–º—è) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ—Ä–µ–∑ —á–∞—Å."
    )
    await message.reply(help_text, parse_mode=ParseMode.HTML)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.create_task(cleanup_expired_alerts())
    await dp.start_polling(bot)



if __name__ == '__main__':
    asyncio.run(main())

